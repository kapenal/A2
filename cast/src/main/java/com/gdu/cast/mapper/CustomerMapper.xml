<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdu.cast.mapper.CustomerMapper">
	<!--  회원가입 -->
	<insert id="insertCustomer" parameterType="com.gdu.cast.vo.Customer">
	INSERT INTO customer(
		customer_id,
		customer_name,
		customer_jumin,
		customer_email,
		customer_pw,
		customer_phonenum,
		Active,
		create_Date,
		update_Date
		
	) VALUES(
		#{customerId},
		#{customerName},
		#{customerJumin},
		#{customerEmail},
		password(#{customerPw}),
		#{customerPhoneNum},
		#{Active},
		now(),
		now()	
	)
	</insert>
	<!-- 회원 가입 시 로그인기록 생성 -->	
	<insert id="insertCustomerLogin" parameterType="com.gdu.cast.vo.Customer_Login">
		INSERT INTO Customer_Login(
		customer_id,
		create_date,
		update_date
		) VALUES(
		#{customerId},
		now(),
		now()
		)
		
	</insert>
	
	<!-- 로그인(세션) -->
	<select id="selectCustomer" parameterType="com.gdu.cast.vo.Customer" resultType="com.gdu.cast.vo.Customer">
		SELECT
			customer_id customerId
		FROM customer
		WHERE customer_id = #{customerId}
		AND customer_pw = password(#{customerPw})
	</select>
	
	
	<!-- qnalist -->
	<select id="selectQnaList" parameterType="Map" resultType="com.gdu.cast.vo.Qna">
		SELECT
			qna_id qnaId,
			qna_title qnaTitle,
			customer_id customerId,
			qna_content qnaContent,
			qna_category qnaCateogry,
			qna_secret qnaSecret,
			create_date createDate,
			update_date updateDate
		FROM Qna
		where customer_id = #{customerId}
		ORDER BY create_date DESC
		LIMIT #{beginRow}, #{ROW_PER_PAGE}
	
	
	</select>
	<!--  qnaList 페이징 -->
	<select id="selectQnaTotalCount" parameterType="String" resultType="int">
	SELECT COUNT(*) 
	FROM qna
	WHERE customer_Id = #{customerId}
	
	</select>
	<!-- qnaOne -->
	<select id="selectQnaOne" parameterType="com.gdu.cast.vo.Qna" resultType="com.gdu.cast.vo.Qna">
		SELECT
			qna_id qnaId,
			qna_title qnaTitle,
			qna_content qnaContent,
			customer_id customerId,
			qna_category qnaCategory,
			create_date createDate,
			update_date updateDate
		FROM qna
		WHERE qna_id = #{qnaId}			
			
	</select>
	<!-- qna 수정 -->
	<update id="updateQna" parameterType="com.gdu.cast.vo.Qna" >
		UPDATE qna SET qna_title = #{qnaTitle}, qna_category = #{qnaCategory}, qna_content = #{qnaContent}, update_date = now()
		WHERE qna_id = #{qnaId} AND customer_id = #{customerId}
	</update>
	<!-- qna 삭제 -->
	<delete id="deleteQnaOne" parameterType="com.gdu.cast.vo.Qna">
		DELETE
		FROM qna
		WHERE qna_id = #{qnaId} AND customer_id = #{customerId}
	</delete>
	
	<!-- 내정보 보기 -->
	<select id="selectInfo" parameterType="com.gdu.cast.vo.Customer" resultType="com.gdu.cast.vo.Customer">
		SELECT
			customer_id customerId,
			customer_name customerName,
			customer_jumin customerJumin,
			customer_email customerEmail,
			customer_phonenum customerPhoneNum
		FROM Customer
		WHERE customer_id = #{customerId}
	</select> 
	
	<!--  내정보 수정 -->
	<update id="updateInfo" parameterType="com.gdu.cast.vo.Customer" >
		UPDATE customer SET customer_name = #{customerName}, 
					   customer_jumin = #{customerJumin}, customer_email = #{customerEmail},
					   customer_phonenum = #{customerPhoneNum}
		WHERE customer_id = #{customerId}
	</update>
	
	<!-- 일반회원 활성화 및 비활성화 조건문 활용 -->
	<select id = "selectActive" parameterType="com.gdu.cast.vo.Customer" resultType="com.gdu.cast.vo.Customer">
		SELECT
			active
		FROM Customer
		WHERE customer_id = #{customerId}	
	</select>
	
	<!--  일반회원 로그인 할 시 update_date now() -->
	<update id="updateDate" parameterType="com.gdu.cast.vo.Customer_Login">
		UPDATE Customer_Login SET update_date = now()
		WHERE customer_id = #{customerId}
	</update>
	
	<!-- 날짜 계산할때 update_date 날짜 구하기 위함. -->
	<select id = "selectCustomerLogin" parameterType="com.gdu.cast.vo.Customer_Login" resultType="com.gdu.cast.vo.Customer_Login">
		SELECT
			customer_id customerId,
			create_date createDate,
			update_date updateDate
		FROM customer_login
		WHERE customer_id = #{customerId}	
	</select >
	<!--  0으로 비활성화 -->
	<update id="updateActiveZeroDate" parameterType="com.gdu.cast.vo.Customer">
		UPDATE Customer SET active = "0"
		WHERE customer_id = #{customerId}
	</update>
	
	<!-- 1로 활성화 -->
	<update id="updateActiveOneDate" parameterType="com.gdu.cast.vo.Customer">
		UPDATE Customer SET active = "1"
		WHERE customer_id = #{customerId}
	</update>
	<!-- 회원탈퇴 아이디 중복 -->
	<select id="selectDeleteId"  parameterType="String" resultType="int">
		SELECT count(*)
		
		FROM delete_id
		WHERE id = #{customerId}
	</select>
	<!-- 회원가입 중복 아이디 검사 -->
	<select id="selectCustomerOK"  parameterType="String" resultType="String">
		Select customer_id customerId
		FROM customer
		WHERE customer_id = #{customerId}
	
	</select>
	<!-- 체험 등록될때마다 업데이트 -->
	<select id="selectCustomerIndexExperienceList" parameterType="Map" resultType="com.gdu.cast.vo.Experience">
		 SELECT 
         experience_id experienceId,
         experience_name experienceName,
          SUBSTR(create_date, 1, 19) createDate
      FROM experience
      ORDER BY create_date DESC
      LIMIT 0, 5
	</select>
	
		<!-- 호텔 등록될때마다 업데이트 -->
	<select id="selectCustomerIndexHoelList" parameterType="Map" resultType="com.gdu.cast.vo.Hotel">
		 SELECT 
         hotel_id hotelId,
         hotel_name hotelName,
         SUBSTR(create_date, 1, 19) createDate
      FROM hotel
      ORDER BY create_date DESC
      LIMIT 0, 5
	</select>

</mapper>